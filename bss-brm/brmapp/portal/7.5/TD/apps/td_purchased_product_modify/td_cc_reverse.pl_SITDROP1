#!/BRM/portal/ThirdParty/perl/5.18.2/bin/perl
################################################################################
# This utilty does the follwing activities:
# 	- Reads Account_no and Transaction Id from input file 
#	- Check in BRM for the reversal already done or not against the tranx id
#	- If exists in BRM but not in custom table, create entry in custom table
#	- If does not exist in BRM, then 
#	- Creates entry in the custom table for reversal done
################################################################################
use File::Copy;
use lib '.' ;
use pcmif;
use Sys::Hostname;
use File::Basename;
use File::Path;
use strict;
use warnings;
use Cwd;

#my $ebufp = pcmif::pcm_perl_new_ebuf();
#my $db_no='0.0.0.1';
sub process_records($);
sub reject_records($);

my $script = "TD_CC_REVERSE";
my $INPUT_DIR;
my $REJ_DIR;
my $ARCHIVE_DIR;
my $LOG_DIR;
my $LOG_FILE;
my $i_flistp;
my $file_date;
#######################################
# Reading Configaration File
#######################################
print "-----Reading Config File------ \n";
print "Reading Configuration File \n\n";
my %ConfVarTable;
my $conf = "config.conf";

#######################################
#readConfigFile();
#######################################
if ( -e $conf )
{
   $INPUT_DIR = `grep '^-' $conf | grep INPUT_DIR | awk '{print \$NF}'`;
   $ARCHIVE_DIR = `grep '^-' $conf | grep ARCHIVE_DIR | awk '{print \$NF}'`;
   $LOG_DIR = `grep '^-' $conf | grep LOG_DIR | awk '{print \$NF}'`;
   $REJ_DIR = `grep '^-' $conf | grep REJ_DIR | awk '{print \$NF}'`;
    chomp($INPUT_DIR);
    chomp($ARCHIVE_DIR);
    chomp($LOG_DIR);
    chomp($REJ_DIR);
}
else
{
    print "\n$script: $conf configuration file not found!\n\n";
    exit(1);
}

########################################
# Create log file
########################################
my ($dd, $mm, $yyyy) = (localtime)[3..5];
$mm=$mm+1;
$yyyy=$yyyy+1900;
my $date="$mm/$dd/$yyyy";
$file_date="$yyyy$mm$dd";

my $log_file = "cc_reverse_$file_date.log";
$log_file = "$LOG_DIR"."/$log_file";
open(LOG_FILE,">> $log_file") or die "Could not open log file";


######################################
# Get context and create error buffer
######################################
my $ebufp = pcmif::pcm_perl_new_ebuf();
my $db_no="0.0.0.1";
#print $db_no ;
my $pcm_ctxp = pcmif::pcm_perl_connect($db_no, $ebufp);

if (pcmif::pcm_perl_is_err($ebufp)) {
        print LOG_FILE "FAILED to Connect to Infranet\n";
        pcmif::pcm_perl_print_ebuf($ebufp);
        #display_date("finished");
        print "\nLog File $log_file\n\n";
        close(LOG_FILE);
        exit(1);
}
my $DB_NO = $db_no;
###################################
# Process the files in input folder
###################################
opendir(INPUT_DIR, $INPUT_DIR) or die "Could not open the input directory";
my ($file, $in_file);

my $adj_file="TD_BULK_REVERSE_$file_date.csv";
open(ADJ_FILE,">$adj_file") or die "Could not open bulk adjustment file";
close(ADJ_FILE);


while ($file = readdir(INPUT_DIR))
{
    $in_file="$INPUT_DIR/$file";

    # Skip directories and swap files
    next if(-d $in_file || $in_file =~ /\/\./);

    # Open input file
    open(IN_FILE,"<$in_file") or die ("Could not open input file");
    print("\nProcessing $file\n");
    print LOG_FILE "\nReading the input file $file\n";

    # Read all the records from the input file into array
    my @all_adj_records = <IN_FILE>;
    foreach my $adj_record (@all_adj_records)
    {
        # Process each record
        process_records($adj_record);
 #   print ("I am here\n");
    }

    # Close input file
    close(IN_FILE);

    # Archive the input file
    move("$in_file","$ARCHIVE_DIR") or die ("Could not archive the input file");
    print("Archived $file\n");
}

# Close input directory
closedir(INPUT_DIR);

# Close the context
pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
##########################################
# Subroutine to process adjustment records
##########################################
sub process_records($)
{
print "\nin process_records()";

###########################################
#Reading individual records
###########################################
my $adj_record = $_[0];
    
	# Validate the record-  account_no  payment_id   transaction_id   service_id
#    if ($adj_record =~ /^([\d\w]+[^, ]*),([+-]?\d+[^, ]*),([^,]*),([^,]*),(.*)$/)
    #if ($adj_record =~ /^([\d\w]+[^, ]*),(.*)$/)
	if ($adj_record =~ /^([\d\w]+[^, ]*),(.*),([^,]*),([^,]*)$/)
	{
        	my ($account_no,$payment_id,$transaction_id,$service_id)=($1,$2,$3,$4);
		print "Account no:  $account_no\n";
        	chomp($payment_id);
		chomp($transaction_id);
		chomp($service_id);
		chomp($account_no); 
		print "Payment_id:  $payment_id\n";
		print "Transaction Id:  $transaction_id\n";
		print "Service Id:  $service_id\n";
########################################
#if payment id is null search event
#by using account_no and trns_id
########################################	
		if ( $payment_id eq '' ){
			print "OOPS!!Payment Id is NULL \n";
			my $template = "select X from /event/billing/reversal 1, /account 2 where 1.F1 = V1 and 1.F2 = 2.F3 and 2.F4 = V4 ";

		        my $search_iflist=<<"XXX";
        		0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
        		0 PIN_FLD_FLAGS       INT [0] 256
	       		0 PIN_FLD_TEMPLATE     STR [0] "$template"
		        0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
		        1        PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
	        	2                PIN_FLD_PAYMENT_TRANS_ID   STR [0] NULL
		        0 PIN_FLD_ARGS                     ARRAY [1] allocated 1, used 1
		        1       PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
	        	2                PIN_FLD_TRANS_ID           STR [0] "$transaction_id"
		        0 PIN_FLD_ARGS                     ARRAY [2] allocated 1, used 1
		        1        PIN_FLD_ACCOUNT_OBJ           POID [0] 0.0.0.1 /account -1 0	
	        	0 PIN_FLD_ARGS                     ARRAY [3] allocated 1, used 1
	        	1        PIN_FLD_POID                  POID [0] 0.0.0.1 /account -1 0
        		0 PIN_FLD_ARGS                     ARRAY [4] allocated 1, used 1	
	        	1        PIN_FLD_ACCOUNT_NO             STR [0] "$account_no"
XXX


	         	$i_flistp = pcmif::pin_perl_str_to_flist($search_iflist,$DB_NO,$ebufp);


		}
########################################
#if payment id is not null search event
#by using account_no, trns_id,payment_id
########################################

	       if (($transaction_id ne '') && (  $payment_id ne '')){
        		print "in second if \n";
        		my $template = "select X from /event/billing/reversal 1, /account 2, /item 3 where 1.F1 = V1 and 1.F2 = 2.F3 and 2.F3 = 3.F5 and 2.F4 = V4 and 3.F6 = V6 ";
        		my $search_iflist=<<"XXX";
        		0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
	        	0 PIN_FLD_FLAGS       INT [0] 256
		        0 PIN_FLD_TEMPLATE     STR [0] "$template"
        		0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
	       		1        PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
		        2                PIN_FLD_PAYMENT_TRANS_ID   STR [0] NULL
        		0 PIN_FLD_ARGS                     ARRAY [1] allocated 1, used 1
	       		1       PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
        		2                PIN_FLD_TRANS_ID           STR [0] "$transaction_id"
        		0 PIN_FLD_ARGS                     ARRAY [2] allocated 1, used 1
		        1        PIN_FLD_ACCOUNT_OBJ           POID [0] 0.0.0.1 /account -1 0
        		0 PIN_FLD_ARGS                     ARRAY [3] allocated 1, used 1
        		1        PIN_FLD_POID                  POID [0] 0.0.0.1 /account -1 0
     	 		0 PIN_FLD_ARGS                     ARRAY [4] allocated 1, used 1
        		1        PIN_FLD_ACCOUNT_NO             STR [0] "$account_no"
        		0 PIN_FLD_ARGS                     ARRAY [5] allocated 1, used 1
        		1        PIN_FLD_ACCOUNT_OBJ           POID [0] 0.0.0.1 /account -1 0
        		0 PIN_FLD_ARGS                     ARRAY [6] allocated 1, used 1
	        	1        PIN_FLD_ITEM_NO                STR [0] "$payment_id"
XXX

        		 $i_flistp = pcmif::pin_perl_str_to_flist($search_iflist,$DB_NO,$ebufp);

		}	

        	my $flags = 0;
        	my $outb_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH",$flags, $i_flistp, $ebufp);
        	if( pcmif::pcm_perl_is_err($ebufp) )
        	{
              		pcmif::pcm_perl_print_ebuf($ebufp);
              		pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
              		display_date("finished");
              		print "\nLog File $log_file\n\n";
              		close(LOG_FILE);
              		close(IN_FILE);
         		closedir(INPUT_DIR);
              		exit(1);
        	}
        	my $search_oflist = pcmif::pin_perl_flist_to_str($outb_flistp, $ebufp);
	        my @o_flist=split('\n', $search_oflist);
        	my $num_lines=@o_flist;
	        print ("Number of lines $num_lines\n");
######################################
#if reverse event found
#check in custom table for entry
######################################
	
        	if($num_lines > 22)
        	{

                	my $template = "select X from /td_payment_refund_reverse where F1 = V1 ";
                	my $search_in_flist=<<"XXX";
                	0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
                	0 PIN_FLD_FLAGS       INT [0] 256
                	0 PIN_FLD_TEMPLATE     STR [0] "$template"
                	0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
	                1      PIN_FLD_TRACKING_ID    STR [0]
        	        0 PIN_FLD_ARGS       ARRAY [1] allocated 1, used 1
                	1       PIN_FLD_ACCOUNT_NO      STR [0] "$account_no"
XXX
  	              my $in_flistp = pcmif::pin_perl_str_to_flist($search_in_flist,$DB_NO,$ebufp);

        	      print ("Input flist-------$search_in_flist\n");
                      my $flags = 0;
                      my $out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH",$flags, $in_flistp, $ebufp);

              	      if( pcmif::pcm_perl_is_err($ebufp) )
                	{
                        	pcmif::pcm_perl_print_ebuf($ebufp);
                                pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
                        	display_date("finished");
                        	print "\nLog File $log_file\n\n";
                        	close(LOG_FILE);
                        	close(IN_FILE);
        	                closedir(INPUT_DIR);
                	        exit(1);
                	}

                	my $search_out_flist = pcmif::pin_perl_flist_to_str($out_flistp, $ebufp);
                	print ("Output flist-------$search_out_flist\n");
                	my @out_flist=split('\n', $search_out_flist);
                	my $number_lines=@out_flist;

                	if($number_lines > 2)
                	{
                        	exit(1);
                	}
######################################
#if entry not present create 
# obj in custom table
#####################################
                	else
                	{
                        	my $tmp_in_flistp=<<"XXX";
	                        0 PIN_FLD_POID                  POID [0] $DB_NO /td_payment_refund_reverse -1 0
        	                0 PIN_FLD_TRACKING_ID           STR [0] "Reverse"
                	        0 PIN_FLD_ACCOUNT_NO            STR [0] "$account_no"
                        	0 PIN_FLD_TRANS_ID              STR [0] "$transaction_id"
	                        0 PIN_FLD_DEFAULT               STR [0] "Y"
        	                0 PIN_FLD_SERVICE_ID           STR [0] "$service_id"
XXX
                	        if( pcmif::pcm_perl_is_err($ebufp) )
                        	{
                                	pcmif::pcm_perl_print_ebuf($ebufp);
	                                pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
        	                        display_date("finished");
                	                print "\nLog File $log_file\n\n";
                        	        close(LOG_FILE);
                                	close(IN_FILE);
                     	                closedir(INPUT_DIR);
                                	exit(1);
                        	}
                        	my $flags = 0;
                        	my $temp_flistp = pcmif::pin_perl_str_to_flist($tmp_in_flistp,$DB_NO,$ebufp);

	                        my $tmp_out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_CREATE_OBJ",$flags, $temp_flistp, $ebufp);
        	                if( pcmif::pcm_perl_is_err($ebufp) )
                	        {
                        	        pcmif::pcm_perl_print_ebuf($ebufp);
                                	pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
	                                display_date("finished");
        	                        print "\nLog File $log_file\n\n";
                	                close(LOG_FILE);
                        	        close(IN_FILE);
                                	closedir(INPUT_DIR);
	                                exit(1);
        	                }


                	}#end of else in if
 
		}#end of if in main if
		else
        	{
#####################################
#Create obj in custom table 
####################################         
		         my $cus_in_flistp=<<"XXX";
        	         0 PIN_FLD_POID                  POID [0] $DB_NO /td_payment_refund_reverse -1 0
                	 0 PIN_FLD_TRACKING_ID           STR [0] "Reverse"
            		 0 PIN_FLD_ACCOUNT_NO            STR [0] "$account_no"
	                 0 PIN_FLD_TRANS_ID              STR [0] "$transaction_id"
        	         0 PIN_FLD_DEFAULT               STR [0] "Y"
                	 0 PIN_FLD_SERVICE_ID           STR [0] "$service_id"
XXX
                 	if( pcmif::pcm_perl_is_err($ebufp) )
                 	{
                        	pcmif::pcm_perl_print_ebuf($ebufp);
                            	pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
                            	display_date("finished");
                            	print "\nLog File $log_file\n\n";
                            	close(LOG_FILE);
                            	close(IN_FILE);
                            	closedir(INPUT_DIR);
                           	 exit(1);
                  	}
                   	$flags = 0;
	                 print ("Input flist-------$cus_in_flistp\n"); 
			my $cus_flistp = pcmif::pin_perl_str_to_flist($cus_in_flistp,$DB_NO, $ebufp);
	#		my $cus_flistp = pcmif::pin_perl_str_to_flist($cus_in_flistp,$DB_NO,$ebufp);
			 print ("Input flist converted\n"); 
        	        my $cus_out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_CREATE_OBJ",$flags, $cus_flistp, $ebufp);
                	if( pcmif::pcm_perl_is_err($ebufp) )
                  	{
                        	 pcmif::pcm_perl_print_ebuf($ebufp);
                            	 pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
	                         display_date("finished");
        	                 print "\nLog File $log_file\n\n";
                	         close(LOG_FILE);
                        	 close(IN_FILE);
                               	closedir(INPUT_DIR);
	                         exit(1);
            	       }


          	}#end of else in main if

    	}#end of main if 

    	else
    	{
        	print LOG_FILE "Invalid record --> $adj_record";
		reject_records($adj_record);

    	}

}#end of process
##########################################
# Subroutine to process rejected records
##########################################
sub reject_records($)
{
	print "\nIn reject_records()\n";
	my $adj_record = $_[0];
	my $rej_file = "cc_reverse_$file_date.rej";
	$rej_file = "$REJ_DIR"."/$rej_file";
	open(REJ_FILE,">> $rej_file") or die "Could not open reject file";
	print REJ_FILE "$adj_record";

}
