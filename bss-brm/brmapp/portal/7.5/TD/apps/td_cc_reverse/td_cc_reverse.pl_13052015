#!/brmapp/portal/ThirdParty/perl/5.18.2/bin/perl
################################################################################
# Script name : td_cc_reverse
# This utilty does the follwing activities:
# 	- Reads Account_no and Transaction Id from input file 
#	- Check in BRM for the reversal already done or not against the tranx id
#	- Create an entry in the custom table for the reversal to be done
# Written by: Dev/Sukanya	Date: 20-Aug-2014 
# Revision date : 22.01.2015
################################################################################
use File::Copy;
use lib '.' ;
use pcmif;
use Sys::Hostname;
use File::Basename;
use File::Path;
use strict;
use warnings;
use Cwd;

sub process_records($);
sub reject_records($);
sub get_flist_fld_value($);
sub Lpad();

my $script = "TD_CC_REVERSE";
my $PIN_HOME;
my $INPUT_DIR;
my $REJ_DIR;
my $ARCHIVE_DIR;
my $LOG_DIR;
my $LOG_FILE;
my $i_flistp;
my $file_date;
my $reason;
my $in_file;
my $pay_transaction_id = "" ;
my $p_transaction_id = "";
my $ser_transaction_id = "";
my $reject_no = 0;
my $processed_no = 0;
my $total_no = 0;
#my @valid_record;
my $str;
my $len;
my $chr;
my $flag = 0;
#######################################
# Reading Configaration File
#######################################
print "-----Reading Config File------ \n";
print "Reading Configuration File \n\n";
my %ConfVarTable;
my $conf = "config.conf";

#######################################
#readConfigFile();
#######################################
if ( -e $conf )
{
   $PIN_HOME = `grep '^-' $conf | grep PIN_HOME | awk '{print \$NF}'`;
   $INPUT_DIR = `grep '^-' $conf | grep INPUT_DIR | awk '{print \$NF}'`;
   $ARCHIVE_DIR = `grep '^-' $conf | grep ARCHIVE_DIR | awk '{print \$NF}'`;
   $LOG_DIR = `grep '^-' $conf | grep LOG_DIR | awk '{print \$NF}'`;
   $REJ_DIR = `grep '^-' $conf | grep REJ_DIR | awk '{print \$NF}'`;
    chomp($PIN_HOME);
    chomp($INPUT_DIR);
    chomp($ARCHIVE_DIR);
    chomp($LOG_DIR);
    chomp($REJ_DIR);
}
else
{
    print "\n$script: $conf configuration file not found!\n\n";
    exit(1);
}

########################################
# Create log file
########################################
my ($dd, $mm, $yyyy) = (localtime)[3..5];
$mm=$mm+1;
$yyyy=$yyyy+1900;
my $date="$mm/$dd/$yyyy";

if (length $mm ne 2)
	{
	$mm=LPad($mm,2,0);
	}

if (length $dd ne 2)
	{
	$dd=LPad($dd,2,0);
	}

$file_date="$yyyy$mm$dd";

my $log_file = "cc_reverse_$file_date.log";
$log_file = "$PIN_HOME"."$LOG_DIR"."/$log_file";
open(LOG_FILE,">>$log_file") or die "Could not open log file";

print(LOG_FILE "\n\n#####################################\n");
print(LOG_FILE "Starting td_cc_reverse at $date");
print(LOG_FILE "\n#####################################\n");


######################################
# Get context and create error buffer
######################################
my $ebufp = pcmif::pcm_perl_new_ebuf();
my $db_no="0.0.0.1";
my $pcm_ctxp = pcmif::pcm_perl_connect($db_no, $ebufp);

if (pcmif::pcm_perl_is_err($ebufp)) {
        print LOG_FILE "FAILED to Connect to Infranet\n";
        pcmif::pcm_perl_print_ebuf($ebufp);
        print "\nLog File $log_file\n\n";
        close(LOG_FILE);
        exit(1);
}
my $DB_NO = $db_no;
###################################
# Process the files in input folder
###################################
my $input_dir = "$PIN_HOME"."$INPUT_DIR";
opendir(INPUT_DIR, $input_dir) or die "Could not open the input directory";
#my ($file, $in_file);
my $file;
my $firstline =1;
while ($file = readdir(INPUT_DIR))
{
    $in_file="$input_dir/$file";
    # Skip directories and swap files
    next if(-d $in_file || $in_file =~ /\/\./);

    # Open input file
    open(IN_FILE,"<$in_file") or die ("Could not open input file");
    print(LOG_FILE "\nProcessing $file\n");
    print LOG_FILE "Reading the input file $file\n";

    # Read all the records from the input file into array
    my @all_rev_records = <IN_FILE>;
    my $arr_size = @all_rev_records;
    my $count=1;
    my $loop=$arr_size-1;
    my @valid_record;
    foreach my $count (1 .. $loop)  
   {
	$valid_record[$count-1] = $all_rev_records[$count];
#	print ("valid record $valid_record\n");
	$count++;
    } 
    foreach my $rev_record (@valid_record)
    {
        # Process each record
        process_records($rev_record);
	 #print(LOG_FILE "\nTotal no of records Processed :  $total_no\n");
    }
    $processed_no = $total_no - $reject_no;

    print(LOG_FILE "Total no of records in flie :  $total_no\n");
    print(LOG_FILE "Total no of records Processed :  $processed_no\n");
    print(LOG_FILE "Total no of records Rejected :  $reject_no\n");
    # Close input file
    close(IN_FILE);
    $total_no = 0;
    $reject_no = 0;
    # Archive the input file
    my $archive_dir = "$PIN_HOME"."$ARCHIVE_DIR";
    move("$in_file","$archive_dir") or die ("Could not archive the input file");
    print(LOG_FILE "Archived $file\n");
}

# Close input directory
closedir(INPUT_DIR);

# Close the context
pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
##########################################
# Subroutine to process reverse records
##########################################
sub process_records($)
{
#print LOG_FILE "\nin process_records()";

###########################################
#Reading individual records
###########################################
	my $rev_record = $_[0];
    	$total_no = $total_no +1;
        chomp($rev_record);
	print ("record $rev_record\n");
	# Validate the record-  account_no  payment_id   transaction_id   service_id
        if ($rev_record =~ /^([\d\w]+[^, ]*),([^,]*),(.*),([^,]*)$/)
	{
	#	$total_no = $total_no + 1; 	
        	my ($account_no,$payment_id,$transaction_id,$service_id)=($1,$2,$3,$4);
        	chomp($payment_id);
		chomp($transaction_id);
		chomp($service_id);
		chomp($account_no);
	#CASE 1:
		if (( $transaction_id eq '') && ($payment_id eq '' )){
			chomp($rev_record);
			$rev_record = "$in_file"." : $rev_record";
			chomp($rev_record);
		        $rev_record = "$rev_record".",Both Payment id and transaction id not valid";
			reject_records($rev_record);

		}
	#CASE 2:
		if (( $transaction_id eq '') && ($payment_id ne '' )){

			my $template = "select X from /event/billing/payment 1, /item 2 where ( 1.F2 = 2.F3 and 2.F1 = V1 and 1.F4 like V4 ) ";

                        my $search_flist=<<"XXX";
                        0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
                        0 PIN_FLD_FLAGS       INT [0] 256
                        0 PIN_FLD_TEMPLATE     STR [0] "$template"
                        0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
                        1        PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
                        2                PIN_FLD_TRANS_ID   STR [0] NULL
                        0 PIN_FLD_ARGS                     ARRAY [1] allocated 1, used 1
			1     PIN_FLD_ITEM_NO                STR [0] "$payment_id"
			0 PIN_FLD_ARGS                     ARRAY [2] allocated 1, used 1
			1     PIN_FLD_ITEM_OBJ              POID [0] NULL
			0 PIN_FLD_ARGS                     ARRAY [3] allocated 1, used 1
			1     PIN_FLD_POID                  POID [0] NULL
			0 PIN_FLD_ARGS                     ARRAY [4] allocated 1, used 1
			1     PIN_FLD_POID                  POID [0] $DB_NO /event/billing/payment/% -1 0
XXX

                        $i_flistp = pcmif::pin_perl_str_to_flist($search_flist,$DB_NO,$ebufp);
			my $flags = 0;
	                my $outb_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH",$flags, $i_flistp, $ebufp);
       
	 	        if( pcmif::pcm_perl_is_err($ebufp) )
                	{
	                        pcmif::pcm_perl_print_ebuf($ebufp);
        	                pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
                        	print "\nLog File $log_file\n\n";
	                        close(LOG_FILE);
        	                close(IN_FILE);
                	        closedir(INPUT_DIR);
                        	exit(1);
                	}
                	my $search_oflist = pcmif::pin_perl_flist_to_str($outb_flistp, $ebufp);
		
			my @value = split(/\n/, $search_oflist);
			foreach my $val_array_element(@value)
			{
				chomp($val_array_element);
				if ($val_array_element=~ /PIN_FLD_TRANS_ID/i)
				{
					$transaction_id = get_flist_fld_value($val_array_element);
				}
		
			}
			if ( $transaction_id eq '')
			{
				print LOG_FILE "payment id nt valid";
			 	chomp($rev_record);
				$rev_record = "$in_file"." --> $rev_record";
                	        chomp($rev_record);
                       		$rev_record = "$rev_record".", Payment_id not valid";
                       		reject_records($rev_record);
			}	

		}	
	#CASE 3:
	########################################
	#if payment id is null search event
	#by using account_no and trns_id
	########################################	
		if (( $transaction_id ne '') && ($payment_id eq '' )){
			my $template = "select X from /event/billing/payment 1, /account 2 where 1.F1 = V1 and 1.F2 = 2.F3 and 2.F4 = V4 ";

		        my $search_iflist=<<"XXX";
       			0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
       			0 PIN_FLD_FLAGS       INT [0] 256
	       		0 PIN_FLD_TEMPLATE     STR [0] "$template"
	        	0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
		        1        PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
	        	2                PIN_FLD_TRANS_ID   STR [0] NULL
	        	0 PIN_FLD_ARGS                     ARRAY [1] allocated 1, used 1
		        1       PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
        		2                PIN_FLD_TRANS_ID           STR [0] "$transaction_id"
	        	0 PIN_FLD_ARGS                     ARRAY [2] allocated 1, used 1
		        1        PIN_FLD_ACCOUNT_OBJ           POID [0] 0.0.0.1 /account -1 0	
	       		0 PIN_FLD_ARGS                     ARRAY [3] allocated 1, used 1
        		1        PIN_FLD_POID                  POID [0] 0.0.0.1 /account -1 0
	       		0 PIN_FLD_ARGS                     ARRAY [4] allocated 1, used 1	
        		1        PIN_FLD_ACCOUNT_NO             STR [0] "$account_no"
XXX

         		$i_flistp = pcmif::pin_perl_str_to_flist($search_iflist,$DB_NO,$ebufp);
			$flag = 1;

		}

	########################################
	#if payment id is not null search event
	#by using account_no, trns_id,payment_id
	########################################

		 if (($transaction_id ne '') && (  $payment_id ne '')){
        	
        		 my $template = "select X from /event/billing/payment 1, /item 2 where ( 1.F2 = 2.F3 and 2.F1 = V1 and 1.F4 like V4 ) ";

	                 my $search_flist=<<"XXX";
                	 0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
        	         0 PIN_FLD_FLAGS       INT [0] 256
	                 0 PIN_FLD_TEMPLATE     STR [0] "$template"
                	 0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
        	         1        PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
	                 2                PIN_FLD_TRANS_ID   STR [0] NULL
                	 0 PIN_FLD_ARGS                     ARRAY [1] allocated 1, used 1
        	         1     PIN_FLD_ITEM_NO                STR [0] "$payment_id"
	                 0 PIN_FLD_ARGS                     ARRAY [2] allocated 1, used 1
                	 1     PIN_FLD_ITEM_OBJ              POID [0] NULL
        	         0 PIN_FLD_ARGS                     ARRAY [3] allocated 1, used 1
	                 1     PIN_FLD_POID                  POID [0] NULL
                	 0 PIN_FLD_ARGS                     ARRAY [4] allocated 1, used 1
        	         1     PIN_FLD_POID                  POID [0] $DB_NO /event/billing/payment/% -1 0
XXX

	                 $i_flistp = pcmif::pin_perl_str_to_flist($search_flist,$DB_NO,$ebufp);
			$flag = 2;
		}

		if ($flag == 1 || $flag == 2)
		{
        		my $flags = 0;
	                my $outb_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH",$flags, $i_flistp, $ebufp);
                	if( pcmif::pcm_perl_is_err($ebufp) )
        	        {
	                	pcmif::pcm_perl_print_ebuf($ebufp);
                        	pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
                	        print "\nLog File $log_file\n\n";
        	                close(LOG_FILE);
	                        close(IN_FILE);
                        	closedir(INPUT_DIR);
                	        exit(1);
        	        }
	                my $search_oflist = pcmif::pin_perl_flist_to_str($outb_flistp, $ebufp);

                	my @value = split(/\n/, $search_oflist);
       
        	        foreach my $val_array_element(@value)
			{
                		chomp($val_array_element);

        	               	if ($val_array_element=~ /PIN_FLD_TRANS_ID/i)
	                       	{
                                	$ser_transaction_id = get_flist_fld_value($val_array_element);
                       		}
			}#loop ends
				
		}
		if (($ser_transaction_id eq '') || ($ser_transaction_id ne $transaction_id))
		{
	        	chomp($rev_record);
              		$rev_record = "$in_file"." : $rev_record";
        	       	chomp($rev_record);
	                $rev_record = "$rev_record".", Trans_id not valid";
              		reject_records($rev_record);

		}
		else{
			my $template = "select X from /event/billing/reversal 1, /account 2 where 1.F1 = V1 and 1.F2 = 2.F3 and 2.F4 = V4 ";
	        	my $search_iflist=<<"XXX";
        		0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
	        	0 PIN_FLD_FLAGS       INT [0] 256
		     	0 PIN_FLD_TEMPLATE     STR [0] "$template"
     			0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
	       		1        PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
	        	2                PIN_FLD_PAYMENT_TRANS_ID   STR [0] NULL
  			0 PIN_FLD_ARGS                     ARRAY [1] allocated 1, used 1
	      		1       PIN_FLD_PAYMENT          SUBSTRUCT [0] allocated 1, used 1
   			2                PIN_FLD_PAYMENT_TRANS_ID           STR [0] "$transaction_id"
    			0 PIN_FLD_ARGS                     ARRAY [2] allocated 1, used 1
		        1        PIN_FLD_ACCOUNT_OBJ           POID [0] 0.0.0.1 /account -1 0
       			0 PIN_FLD_ARGS                     ARRAY [3] allocated 1, used 1
      			1        PIN_FLD_POID                  POID [0] 0.0.0.1 /account -1 0
		     	0 PIN_FLD_ARGS                     ARRAY [4] allocated 1, used 1
       			1        PIN_FLD_ACCOUNT_NO             STR [0] "$account_no"
XXX

        		 $i_flistp = pcmif::pin_perl_str_to_flist($search_iflist,$DB_NO,$ebufp);
		
				
         		my $flags = 0;
        		my $outb_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH",$flags, $i_flistp, $ebufp);
        		if( pcmif::pcm_perl_is_err($ebufp) )
	        	{	
              			pcmif::pcm_perl_print_ebuf($ebufp);
        	      		pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
	              		print "\nLog File $log_file\n\n";
              			close(LOG_FILE);
        	      		close(IN_FILE);
	         		closedir(INPUT_DIR);
              			exit(1);
        		}
	        	my $search_oflist = pcmif::pin_perl_flist_to_str($outb_flistp, $ebufp);
	      
	######################################
	#if reverse event found
	#check in custom table for entry
	######################################
	
        		my @value = split(/\n/, $search_oflist);
	                foreach my $val_array_element(@value)
			{
        	        	chomp($val_array_element);
	                	if ($val_array_element=~ /PIN_FLD_PAYMENT_TRANS_ID/i)
                		{
                     			$pay_transaction_id = get_flist_fld_value($val_array_element);
                		}
			}
			if( $pay_transaction_id ne '')
	                {
				print LOG_FILE "payment is already reversed";
        	                chomp($rev_record);
	                        $rev_record = "$in_file"." : $rev_record";
	                        chomp($rev_record);
                        	$rev_record = "$rev_record"." ,Already reversed";
                	        reject_records($rev_record);
        	        }
	
			else
        		{
	#####################################
	#Check if entry exists in custom
	#table if not duplicate
	#Create obj in custom table 
	#################################### 
				$p_transaction_id ="";
	                        my $template = "select X from /td_payment_refund_reverse where F1 = V1 and F2 = V2 ";
        	                my $search_in_flist=<<"XXX";
                        	0 PIN_FLD_POID        POID [0] $DB_NO /search -1 0
                	        0 PIN_FLD_FLAGS       INT [0] 256
        	                0 PIN_FLD_TEMPLATE     STR [0] "$template"
	                        0 PIN_FLD_RESULTS    ARRAY [0] allocated 1, used 1
                        	1      PIN_FLD_TRANS_ID    STR [0]
                	        0 PIN_FLD_ARGS       ARRAY [1] allocated 1, used 1
        	                1       PIN_FLD_TRANS_ID      STR [0] "$transaction_id"
	                        0 PIN_FLD_ARGS       ARRAY [2] allocated 1, used 1
	                        1       PIN_FLD_TRACKING_ID      STR [0] "Reverse"
XXX
	                      my $in_flistp = pcmif::pin_perl_str_to_flist($search_in_flist,$DB_NO,$ebufp);

	                      my $flags = 0;
                	      my $out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH",$flags, $in_flistp, $ebufp);

        	              if( pcmif::pcm_perl_is_err($ebufp) )
	                        {
                                	pcmif::pcm_perl_print_ebuf($ebufp);
                        	        pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
                	                print "\nLog File $log_file\n\n";
        	                        close(LOG_FILE);
	                                close(IN_FILE);
                                	closedir(INPUT_DIR);
                        	        exit(1);
                	        }
 				my $search_oflist = pcmif::pin_perl_flist_to_str($out_flistp, $ebufp);
		                my @value = split(/\n/, $search_oflist);
        	        	foreach my $val_array_element(@value)
				{
        	        	        chomp($val_array_element);
	                        	if ($val_array_element=~ /PIN_FLD_TRANS_ID/i)
                        		{
                        	        	$p_transaction_id = get_flist_fld_value($val_array_element);
                	        	}
        	        	}
	                	if($p_transaction_id ne '')
                		{
	                	        chomp($rev_record);
        		                $rev_record = "$in_file"." : $rev_record";
        	        	        chomp($rev_record);
	                        	$rev_record = "$rev_record"." ,Duplicate entry";
                        		reject_records($rev_record);
                		}
				else{
				         my $cus_in_flistp=<<"XXX";
	        		         0 PIN_FLD_POID                  POID [0] $DB_NO /td_payment_refund_reverse -1 0
                			 0 PIN_FLD_TRACKING_ID           STR [0] "Reverse"
            				 0 PIN_FLD_ACCOUNT_NO            STR [0] "$account_no"
			                 0 PIN_FLD_TRANS_ID              STR [0] "$transaction_id"
        			         0 PIN_FLD_DEFAULT               STR [0] "Y"
	                		 0 PIN_FLD_SERVICE_ID           STR [0] "$service_id"
XXX
                 			if( pcmif::pcm_perl_is_err($ebufp) )
                 			{
                	        		pcmif::pcm_perl_print_ebuf($ebufp);
		                            	pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
	        	                    	print "\nLog File $log_file\n\n";
                	            		close(LOG_FILE);
                        		    	close(IN_FILE);
                        	    		closedir(INPUT_DIR);
	        	                   	exit(1);
        		          	}
	                	   	$flags = 0;
					my $cus_flistp = pcmif::pin_perl_str_to_flist($cus_in_flistp,$DB_NO, $ebufp);
	        		        my $cus_out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_CREATE_OBJ",$flags, $cus_flistp, $ebufp);
        		        	if( pcmif::pcm_perl_is_err($ebufp) )
        	        	  	{
	                       			 pcmif::pcm_perl_print_ebuf($ebufp);
                            			 pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
	        		                 print "\nLog File $log_file\n\n";
        		        	         close(LOG_FILE);
        	        	        	 close(IN_FILE);
	                                      	 closedir(INPUT_DIR);
	                        		 exit(1);
            	       			}
				}		

          		}#end of else in main if

    		}#end of main if 
	}

    	else
    	{
		$reason = "Invalid record";
		chomp($rev_record);
		$rev_record = "$in_file"." : $rev_record";
                chomp($rev_record);
		$rev_record = "$rev_record".",Invalid record";
		chomp($rev_record);	
        	print LOG_FILE "Invalid record --> $rev_record";
		reject_records($rev_record);

    	}

}#end of process
##########################################
# Subroutine to process rejected records
##########################################
sub reject_records($)
{
	$reject_no = $reject_no + 1;
        my $rev_record = $_[0];
        my $rej_file = "cc_reverse_$file_date.rej";
        $rej_file = "$PIN_HOME"."$REJ_DIR"."/$rej_file";
        open(REJ_FILE,">> $rej_file") or die "Could not open reject file";
	print REJ_FILE "\n$rev_record";
	
}

###########################################
# Subroutine to get field value from flist
###########################################
sub get_flist_fld_value($)
{
         my $out_flist_string_row = shift;
         my @return_value = split(/\s/, $out_flist_string_row);
         my $temp_value = $return_value[$#return_value];
         if ($temp_value =~ /\"/){
                my @temp_array = split(/\"/, $temp_value);
                $temp_value = $temp_array[1];
         }
        my $ret_flist_fld_value = $temp_value;
}
###########################################
# Subroutine to get Month value in 2 digit
###########################################

sub LPad 
{
	($str, $len, $chr) = @_;
	$chr = "0" unless (defined($chr));
	return substr(($chr x ($len - length $str)).$str, 0, $len);
} 
