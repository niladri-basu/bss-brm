/*
* Copyright (c) 2001, 2010, Oracle and/or its affiliates. All rights reserved. 
 *
 *      This material is the confidential property of Oracle Corporation
 *      or its licensors and may be used, reproduced, stored or transmitted
 *      only in accordance with a valid Oracle license or sublicense agreement.
 */

#ifndef _FM_COLLECTIONS_H_
#define _FM_COLLECTIONS_H_

#ifdef WIN32
#define snprintf _snprintf
#ifdef FM_COLLECTIONS_DLL
#define EXTERN __declspec(dllexport)
#else
#define EXTERN __declspec(dllimport)
#endif
#else
#define EXTERN extern
#endif
#include "pin_act.h"
#include "pin_cust.h"
/* Default profile name string */
#define PIN_PROFILE_DEFAULT_USD		"Default (USD)"

/* Action type strings */
#define PIN_ACTION_DUNNING_LETTER	"dunning_letter"
#define PIN_ACTION_INVOICE_REMINDER	"invoice_reminder"
#define PIN_ACTION_POLICY_ACTION	"policy_action"
#define PIN_ACTION_LATE_FEES		"late_fee"
#define PIN_ACTION_FINANCE_CHARGES	"finance_charge"
#define PIN_ACTION_MANUAL_ACTION	"manual_action"
#define	PIN_ACTION_REFER_TO_OUTSIDE_AGENCY	"refer_to_outside_agency"
#define PIN_ACTION_CLOSE_BILLINFO       "close_billinfo"
#define PIN_ACTION_INACTIVATE_BILLINFO  "inactivate_billinfo"
#define PIN_ACTION_WRITEOFF_BILLINFO    "writeoff_billinfo"

/* To be removed in future */
#define PIN_ACTION_CLOSE_ACCOUNT       "close_billinfo"
#define PIN_ACTION_INACTIVATE_ACCOUNT  "inactivate_billinfo"
#define PIN_ACTION_WRITEOFF_ACCOUNT    "writeoff_billinfo"


/* PCM_OP_COLLECTIONS_PROCESS_BILLINFO run status */
typedef enum pin_collections_status {
	PIN_COLLECTIONS_STATUS_REMAIN_OUT	=	0,
	PIN_COLLECTIONS_STATUS_ENTER		=	1,
	PIN_COLLECTIONS_STATUS_REMAIN_IN	=	2,
	PIN_COLLECTIONS_STATUS_EXIT		=	3
} pin_collections_status_t;

/* collections action status */
typedef enum pin_action_status {
	PIN_ACTION_PENDING	=	0,
	PIN_ACTION_CANCELED	=	1,
	PIN_ACTION_COMPLETED	=	2,
	PIN_ACTION_ERROR	=	3,
	PIN_ACTION_NO_EXECUTE	=	4
} pin_action_status_t;

/* collections scenario exit reason */
typedef enum pin_exit_reason {
	PIN_SCENARIO_EXIT_NORMAL	=	0,
	PIN_SCNEARIO_EXIT_ENFORCED	=	1
} pin_exit_reason_t;


/* PIN_FLD_ACTION MODE action execute option */

typedef enum pin_action_execute_option {
	PIN_ACTION_MUST_EXECUTE		=	0,
	PIN_ACTION_OPTIONAL_EXECUTE	=	1
} pin_action_execute_option_t;

/* Audit event type */
#define PIN_COLLECTIONS_AUDIT_ACTION		"/event/audit/collections/action"

/* Object name string */
#define PIN_OBJ_NAME_ACTION			"Collection Action Object"
#define PIN_OBJ_NAME_SCENARIO 			"Collections Scenario Object"

/* Audit event description strings */
#define PIN_EVENT_DESCR_COLLECTIONS_CREATE_ACTION	"Creating: Action"
#define PIN_EVENT_DESCR_COLLECTIONS_UPDATE_ACTION	"Updating: Action"
#define PIN_EVENT_DESCR_COLLECTIONS_ENTER               "Entered collections"
#define PIN_EVENT_DESCR_COLLECTIONS_EXIT                "Exited collections"

/* Action update description strings */
#define PIN_ACTION_DESCR_CREATE				"Action created"
#define PIN_ACTION_DESCR_CANCEL				"Action canceled"
#define PIN_ACTION_DESCR_ASSIGN_AGENT			"Agent assigned"
#define PIN_ACTION_DESCR_TAKEN				"Action taken"
#define PIN_ACTION_DESCR_RESCHEDULE			"Action rescheduled"
#define PIN_ACTION_DESCR_SET_STATUS			"Action status set"
#define PIN_ACTION_DESCR_SCHEDULE			"Action scheduled"
#define PIN_ACTION_DESCR_UPDATE 			"Action updated"
#define PIN_ACTION_DESCR_PENDING                        "Action pending"

/* Late fee calculation options */
#define PIN_OPTION_EITHER				0
#define PIN_OPTION_MIN					1
#define PIN_OPTION_MAX					2
#define PIN_OPTION_BOTH					3

/* Event type for late fee */
#define PIN_COLLECTIONS_EVENT_LATEFEE		"/event/billing/late_fee"
#define PIN_OBJ_NAME_EVENT_LATEFEE		"Late fee event"
#define PIN_EVENT_DESCR_LATEFEE			"Charge for late fee event"

/* Event type for finance charge */
#define PIN_COLLECTIONS_EVENT_FINANCECHARGE	"/event/billing/finance_charge"
#define PIN_OBJ_NAME_EVENT_FINANCECHARGE	"Finance charge event"
#define PIN_EVENT_DESCR_FINANCECHARGE		"Finance charge"

/* Buffer size to store the description string */
#define COLL_ACTION_DESCR_LEN			1024

/* fm_collections_cache.c */
EXTERN pin_flist_t *
fm_collections_cache_get_profile(
        pcm_context_t           *ctxp,
        poid_t                  *p_pdp,
        pin_errbuf_t            *ebufp);


EXTERN pin_flist_t *
fm_collections_cache_get_action(
        pcm_context_t           *ctxp,
        poid_t                  *a_pdp,
        pin_errbuf_t            *ebufp);

EXTERN void
fm_collections_cache_update(
        poid_t          *pdp,
        cm_cache_t      *cache_ptr,
        pin_flist_t     *cache_flistp,
        pin_errbuf_t    *ebufp);

EXTERN void
fm_collections_cache_get_template(
        pcm_context_t           *ctxp,
        pin_flist_t             *action_flistp,
        pin_errbuf_t            *ebufp);

/* fm_collections_utils.c */
EXTERN void
fm_collections_utils_get_description(
	char                    *action_str,
	char                    *action_name,
	pin_action_status_t     action_status,
	char 			*descrp,
	pin_errbuf_t            *ebufp);

#endif /* _FM_COLLECTIONS_H_ */
